(function () {
  function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }

  function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

  function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }

  function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

  function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

  function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }

  function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }

  function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

  function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return exports; }; var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || function (obj, key, desc) { obj[key] = desc.value; }, $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag"; function define(obj, key, value) { return Object.defineProperty(obj, key, { value: value, enumerable: !0, configurable: !0, writable: !0 }), obj[key]; } try { define({}, ""); } catch (err) { define = function define(obj, key, value) { return obj[key] = value; }; } function wrap(innerFn, outerFn, self, tryLocsList) { var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []); return defineProperty(generator, "_invoke", { value: makeInvokeMethod(innerFn, self, context) }), generator; } function tryCatch(fn, obj, arg) { try { return { type: "normal", arg: fn.call(obj, arg) }; } catch (err) { return { type: "throw", arg: err }; } } exports.wrap = wrap; var ContinueSentinel = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var IteratorPrototype = {}; define(IteratorPrototype, iteratorSymbol, function () { return this; }); var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([]))); NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype); var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype); function defineIteratorMethods(prototype) { ["next", "throw", "return"].forEach(function (method) { define(prototype, method, function (arg) { return this._invoke(method, arg); }); }); } function AsyncIterator(generator, PromiseImpl) { function invoke(method, arg, resolve, reject) { var record = tryCatch(generator[method], generator, arg); if ("throw" !== record.type) { var result = record.arg, value = result.value; return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) { invoke("next", value, resolve, reject); }, function (err) { invoke("throw", err, resolve, reject); }) : PromiseImpl.resolve(value).then(function (unwrapped) { result.value = unwrapped, resolve(result); }, function (error) { return invoke("throw", error, resolve, reject); }); } reject(record.arg); } var previousPromise; defineProperty(this, "_invoke", { value: function value(method, arg) { function callInvokeWithMethodAndArg() { return new PromiseImpl(function (resolve, reject) { invoke(method, arg, resolve, reject); }); } return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(innerFn, self, context) { var state = "suspendedStart"; return function (method, arg) { if ("executing" === state) throw new Error("Generator is already running"); if ("completed" === state) { if ("throw" === method) throw arg; return doneResult(); } for (context.method = method, context.arg = arg;;) { var delegate = context.delegate; if (delegate) { var delegateResult = maybeInvokeDelegate(delegate, context); if (delegateResult) { if (delegateResult === ContinueSentinel) continue; return delegateResult; } } if ("next" === context.method) context.sent = context._sent = context.arg;else if ("throw" === context.method) { if ("suspendedStart" === state) throw state = "completed", context.arg; context.dispatchException(context.arg); } else "return" === context.method && context.abrupt("return", context.arg); state = "executing"; var record = tryCatch(innerFn, self, context); if ("normal" === record.type) { if (state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel) continue; return { value: record.arg, done: context.done }; } "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg); } }; } function maybeInvokeDelegate(delegate, context) { var methodName = context.method, method = delegate.iterator[methodName]; if (undefined === method) return context.delegate = null, "throw" === methodName && delegate.iterator["return"] && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel; var record = tryCatch(method, delegate.iterator, context.arg); if ("throw" === record.type) return context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel; var info = record.arg; return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel); } function pushTryEntry(locs) { var entry = { tryLoc: locs[0] }; 1 in locs && (entry.catchLoc = locs[1]), 2 in locs && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry); } function resetTryEntry(entry) { var record = entry.completion || {}; record.type = "normal", delete record.arg, entry.completion = record; } function Context(tryLocsList) { this.tryEntries = [{ tryLoc: "root" }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0); } function values(iterable) { if (iterable) { var iteratorMethod = iterable[iteratorSymbol]; if (iteratorMethod) return iteratorMethod.call(iterable); if ("function" == typeof iterable.next) return iterable; if (!isNaN(iterable.length)) { var i = -1, next = function next() { for (; ++i < iterable.length;) if (hasOwn.call(iterable, i)) return next.value = iterable[i], next.done = !1, next; return next.value = undefined, next.done = !0, next; }; return next.next = next; } } return { next: doneResult }; } function doneResult() { return { value: undefined, done: !0 }; } return GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), defineProperty(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) { var ctor = "function" == typeof genFun && genFun.constructor; return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name)); }, exports.mark = function (genFun) { return Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun; }, exports.awrap = function (arg) { return { __await: arg }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () { return this; }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) { void 0 === PromiseImpl && (PromiseImpl = Promise); var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl); return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) { return result.done ? result.value : iter.next(); }); }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () { return this; }), define(Gp, "toString", function () { return "[object Generator]"; }), exports.keys = function (val) { var object = Object(val), keys = []; for (var key in object) keys.push(key); return keys.reverse(), function next() { for (; keys.length;) { var key = keys.pop(); if (key in object) return next.value = key, next.done = !1, next; } return next.done = !0, next; }; }, exports.values = values, Context.prototype = { constructor: Context, reset: function reset(skipTempReset) { if (this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined); }, stop: function stop() { this.done = !0; var rootRecord = this.tryEntries[0].completion; if ("throw" === rootRecord.type) throw rootRecord.arg; return this.rval; }, dispatchException: function dispatchException(exception) { if (this.done) throw exception; var context = this; function handle(loc, caught) { return record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught; } for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i], record = entry.completion; if ("root" === entry.tryLoc) return handle("end"); if (entry.tryLoc <= this.prev) { var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc"); if (hasCatch && hasFinally) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } else if (hasCatch) { if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0); } else { if (!hasFinally) throw new Error("try statement without catch or finally"); if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc); } } } }, abrupt: function abrupt(type, arg) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) { var finallyEntry = entry; break; } } finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null); var record = finallyEntry ? finallyEntry.completion : {}; return record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record); }, complete: function complete(record, afterLoc) { if ("throw" === record.type) throw record.arg; return "break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel; }, finish: function finish(finallyLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.finallyLoc === finallyLoc) return this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel; } }, "catch": function _catch(tryLoc) { for (var i = this.tryEntries.length - 1; i >= 0; --i) { var entry = this.tryEntries[i]; if (entry.tryLoc === tryLoc) { var record = entry.completion; if ("throw" === record.type) { var thrown = record.arg; resetTryEntry(entry); } return thrown; } } throw new Error("illegal catch attempt"); }, delegateYield: function delegateYield(iterable, resultName, nextLoc) { return this.delegate = { iterator: values(iterable), resultName: resultName, nextLoc: nextLoc }, "next" === this.method && (this.arg = undefined), ContinueSentinel; } }, exports; }

  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

  function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }

  function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }

  function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return typeof key === "symbol" ? key : String(key); }

  function _toPrimitive(input, hint) { if (typeof input !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (typeof res !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

  (self["webpackChunkxog_ui"] = self["webpackChunkxog_ui"] || []).push([["node_modules_firebase_compat_messaging_dist_index_esm_js"], {
    /***/
    60728:
    /*!***********************************************************************!*\
      !*** ./node_modules/@firebase/messaging-compat/dist/index.esm2017.js ***!
      \***********************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _firebase_app_compat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @firebase/app-compat */
      54486);
      /* harmony import */


      var _firebase_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @firebase/component */
      16034);
      /* harmony import */


      var _firebase_messaging__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! @firebase/messaging */
      45974);
      /* harmony import */


      var _firebase_messaging_sw__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @firebase/messaging/sw */
      19060);

      var name = "@firebase/messaging-compat";
      var version = "0.1.0";
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */

      function isSupported() {
        if (self && 'ServiceWorkerGlobalScope' in self) {
          // Running in ServiceWorker context
          return isSwSupported();
        } else {
          // Assume we are in the window context.
          return isWindowSupported();
        }
      }
      /**
       * Checks to see if the required APIs exist.
       */


      function isWindowSupported() {
        return 'indexedDB' in window && indexedDB !== null && navigator.cookieEnabled && 'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window && 'fetch' in window && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');
      }
      /**
       * Checks to see if the required APIs exist within SW Context.
       */


      function isSwSupported() {
        return 'indexedDB' in self && indexedDB !== null && 'PushManager' in self && 'Notification' in self && ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification') && PushSubscription.prototype.hasOwnProperty('getKey');
      }

      var MessagingCompatImpl = /*#__PURE__*/function () {
        function MessagingCompatImpl(app, _delegate) {
          _classCallCheck(this, MessagingCompatImpl);

          this.app = app;
          this._delegate = _delegate;
          this.app = app;
          this._delegate = _delegate;
        }

        _createClass(MessagingCompatImpl, [{
          key: "getToken",
          value: function () {
            var _getToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(options) {
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    return _context.abrupt("return", (0, _firebase_messaging__WEBPACK_IMPORTED_MODULE_2__.getToken)(this._delegate, options));

                  case 1:
                  case "end":
                    return _context.stop();
                }
              }, _callee, this);
            }));

            function getToken(_x) {
              return _getToken.apply(this, arguments);
            }

            return getToken;
          }()
        }, {
          key: "deleteToken",
          value: function () {
            var _deleteToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
              return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                while (1) switch (_context2.prev = _context2.next) {
                  case 0:
                    return _context2.abrupt("return", (0, _firebase_messaging__WEBPACK_IMPORTED_MODULE_2__.deleteToken)(this._delegate));

                  case 1:
                  case "end":
                    return _context2.stop();
                }
              }, _callee2, this);
            }));

            function deleteToken() {
              return _deleteToken.apply(this, arguments);
            }

            return deleteToken;
          }()
        }, {
          key: "onMessage",
          value: function onMessage(nextOrObserver) {
            return (0, _firebase_messaging__WEBPACK_IMPORTED_MODULE_2__.onMessage)(this._delegate, nextOrObserver);
          }
        }, {
          key: "onBackgroundMessage",
          value: function onBackgroundMessage(nextOrObserver) {
            return (0, _firebase_messaging_sw__WEBPACK_IMPORTED_MODULE_3__.onBackgroundMessage)(this._delegate, nextOrObserver);
          }
        }]);

        return MessagingCompatImpl;
      }();
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      var messagingCompatFactory = function messagingCompatFactory(container) {
        if (self && 'ServiceWorkerGlobalScope' in self) {
          // in sw
          return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging-sw').getImmediate());
        } else {
          // in window
          return new MessagingCompatImpl(container.getProvider('app-compat').getImmediate(), container.getProvider('messaging').getImmediate());
        }
      };

      var NAMESPACE_EXPORTS = {
        isSupported: isSupported
      };

      function registerMessagingCompat() {
        _firebase_app_compat__WEBPACK_IMPORTED_MODULE_0__["default"].INTERNAL.registerComponent(new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Component('messaging-compat', messagingCompatFactory, "PUBLIC"
        /* PUBLIC */
        ).setServiceProps(NAMESPACE_EXPORTS));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      registerMessagingCompat();

      _firebase_app_compat__WEBPACK_IMPORTED_MODULE_0__["default"].registerVersion(name, version); //# sourceMappingURL=index.esm2017.js.map

      /***/

    },

    /***/
    19060:
    /*!*******************************************************************!*\
      !*** ./node_modules/@firebase/messaging/dist/index.sw.esm2017.js ***!
      \*******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      var _ERROR_MAP;

      __webpack_require__.r(__webpack_exports__);
      /* harmony export */


      __webpack_require__.d(__webpack_exports__, {
        /* harmony export */
        "experimentalSetDeliveryMetricsExportedToBigQueryEnabled": function experimentalSetDeliveryMetricsExportedToBigQueryEnabled() {
          return (
            /* binding */
            setDeliveryMetricsExportedToBigQueryEnabled
          );
        },

        /* harmony export */
        "getMessaging": function getMessaging() {
          return (
            /* binding */
            getMessagingInSw
          );
        },

        /* harmony export */
        "isSupported": function isSupported() {
          return (
            /* binding */
            isSwSupported
          );
        },

        /* harmony export */
        "onBackgroundMessage": function onBackgroundMessage() {
          return (
            /* binding */
            _onBackgroundMessage
          );
        }
        /* harmony export */

      });
      /* harmony import */


      var _firebase_installations__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @firebase/installations */
      41568);
      /* harmony import */


      var _firebase_component__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(
      /*! @firebase/component */
      16034);
      /* harmony import */


      var idb__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(
      /*! idb */
      16676);
      /* harmony import */


      var idb__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(idb__WEBPACK_IMPORTED_MODULE_2__);
      /* harmony import */


      var _firebase_util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(
      /*! @firebase/util */
      64685);
      /* harmony import */


      var _firebase_app__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(
      /*! @firebase/app */
      55452);
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      var DEFAULT_VAPID_KEY = 'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';
      var ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';
      /** Key of FCM Payload in Notification's data field. */

      var FCM_MSG = 'FCM_MSG';
      var CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id'; // Defined as in proto/messaging_event.proto. Neglecting fields that are supported.

      var SDK_PLATFORM_WEB = 3;
      var EVENT_MESSAGE_DELIVERED = 1;
      var MessageType$1;

      (function (MessageType) {
        MessageType[MessageType["DATA_MESSAGE"] = 1] = "DATA_MESSAGE";
        MessageType[MessageType["DISPLAY_NOTIFICATION"] = 3] = "DISPLAY_NOTIFICATION";
      })(MessageType$1 || (MessageType$1 = {}));
      /**
       * @license
       * Copyright 2018 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
       * in compliance with the License. You may obtain a copy of the License at
       *
       * http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software distributed under the License
       * is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
       * or implied. See the License for the specific language governing permissions and limitations under
       * the License.
       */


      var MessageType;

      (function (MessageType) {
        MessageType["PUSH_RECEIVED"] = "push-received";
        MessageType["NOTIFICATION_CLICKED"] = "notification-clicked";
      })(MessageType || (MessageType = {}));
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      function arrayToBase64(array) {
        var uint8Array = new Uint8Array(array);
        var base64String = btoa(String.fromCharCode.apply(String, _toConsumableArray(uint8Array)));
        return base64String.replace(/=/g, '').replace(/\+/g, '-').replace(/\//g, '_');
      }

      function base64ToArray(base64String) {
        var padding = '='.repeat((4 - base64String.length % 4) % 4);
        var base64 = (base64String + padding).replace(/\-/g, '+').replace(/_/g, '/');
        var rawData = atob(base64);
        var outputArray = new Uint8Array(rawData.length);

        for (var i = 0; i < rawData.length; ++i) {
          outputArray[i] = rawData.charCodeAt(i);
        }

        return outputArray;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      var OLD_DB_NAME = 'fcm_token_details_db';
      /**
       * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade
       * callback is called for all versions of the old DB.
       */

      var OLD_DB_VERSION = 5;
      var OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';

      function migrateOldDatabase(_x2) {
        return _migrateOldDatabase.apply(this, arguments);
      }

      function _migrateOldDatabase() {
        _migrateOldDatabase = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(senderId) {
          var databases, dbNames, tokenDetails, db;
          return _regeneratorRuntime().wrap(function _callee4$(_context4) {
            while (1) switch (_context4.prev = _context4.next) {
              case 0:
                if (!('databases' in indexedDB)) {
                  _context4.next = 7;
                  break;
                }

                _context4.next = 3;
                return indexedDB.databases();

              case 3:
                databases = _context4.sent;
                dbNames = databases.map(function (db) {
                  return db.name;
                });

                if (dbNames.includes(OLD_DB_NAME)) {
                  _context4.next = 7;
                  break;
                }

                return _context4.abrupt("return", null);

              case 7:
                tokenDetails = null;
                _context4.next = 10;
                return (0, idb__WEBPACK_IMPORTED_MODULE_2__.openDb)(OLD_DB_NAME, OLD_DB_VERSION, /*#__PURE__*/function () {
                  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(db) {
                    var _a, objectStore, value, oldDetails, _oldDetails, _oldDetails2;

                    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                      while (1) switch (_context3.prev = _context3.next) {
                        case 0:
                          if (!(db.oldVersion < 2)) {
                            _context3.next = 2;
                            break;
                          }

                          return _context3.abrupt("return");

                        case 2:
                          if (db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {
                            _context3.next = 4;
                            break;
                          }

                          return _context3.abrupt("return");

                        case 4:
                          objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);
                          _context3.next = 7;
                          return objectStore.index('fcmSenderId').get(senderId);

                        case 7:
                          value = _context3.sent;
                          _context3.next = 10;
                          return objectStore.clear();

                        case 10:
                          if (value) {
                            _context3.next = 12;
                            break;
                          }

                          return _context3.abrupt("return");

                        case 12:
                          if (!(db.oldVersion === 2)) {
                            _context3.next = 19;
                            break;
                          }

                          oldDetails = value;

                          if (!(!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint)) {
                            _context3.next = 16;
                            break;
                          }

                          return _context3.abrupt("return");

                        case 16:
                          tokenDetails = {
                            token: oldDetails.fcmToken,
                            createTime: (_a = oldDetails.createTime) !== null && _a !== void 0 ? _a : Date.now(),
                            subscriptionOptions: {
                              auth: oldDetails.auth,
                              p256dh: oldDetails.p256dh,
                              endpoint: oldDetails.endpoint,
                              swScope: oldDetails.swScope,
                              vapidKey: typeof oldDetails.vapidKey === 'string' ? oldDetails.vapidKey : arrayToBase64(oldDetails.vapidKey)
                            }
                          };
                          _context3.next = 20;
                          break;

                        case 19:
                          if (db.oldVersion === 3) {
                            _oldDetails = value;
                            tokenDetails = {
                              token: _oldDetails.fcmToken,
                              createTime: _oldDetails.createTime,
                              subscriptionOptions: {
                                auth: arrayToBase64(_oldDetails.auth),
                                p256dh: arrayToBase64(_oldDetails.p256dh),
                                endpoint: _oldDetails.endpoint,
                                swScope: _oldDetails.swScope,
                                vapidKey: arrayToBase64(_oldDetails.vapidKey)
                              }
                            };
                          } else if (db.oldVersion === 4) {
                            _oldDetails2 = value;
                            tokenDetails = {
                              token: _oldDetails2.fcmToken,
                              createTime: _oldDetails2.createTime,
                              subscriptionOptions: {
                                auth: arrayToBase64(_oldDetails2.auth),
                                p256dh: arrayToBase64(_oldDetails2.p256dh),
                                endpoint: _oldDetails2.endpoint,
                                swScope: _oldDetails2.swScope,
                                vapidKey: arrayToBase64(_oldDetails2.vapidKey)
                              }
                            };
                          }

                        case 20:
                        case "end":
                          return _context3.stop();
                      }
                    }, _callee3);
                  }));

                  return function (_x30) {
                    return _ref6.apply(this, arguments);
                  };
                }());

              case 10:
                db = _context4.sent;
                db.close(); // Delete all old databases.

                _context4.next = 14;
                return (0, idb__WEBPACK_IMPORTED_MODULE_2__.deleteDb)(OLD_DB_NAME);

              case 14:
                _context4.next = 16;
                return (0, idb__WEBPACK_IMPORTED_MODULE_2__.deleteDb)('fcm_vapid_details_db');

              case 16:
                _context4.next = 18;
                return (0, idb__WEBPACK_IMPORTED_MODULE_2__.deleteDb)('undefined');

              case 18:
                return _context4.abrupt("return", checkTokenDetails(tokenDetails) ? tokenDetails : null);

              case 19:
              case "end":
                return _context4.stop();
            }
          }, _callee4);
        }));
        return _migrateOldDatabase.apply(this, arguments);
      }

      function checkTokenDetails(tokenDetails) {
        if (!tokenDetails || !tokenDetails.subscriptionOptions) {
          return false;
        }

        var subscriptionOptions = tokenDetails.subscriptionOptions;
        return typeof tokenDetails.createTime === 'number' && tokenDetails.createTime > 0 && typeof tokenDetails.token === 'string' && tokenDetails.token.length > 0 && typeof subscriptionOptions.auth === 'string' && subscriptionOptions.auth.length > 0 && typeof subscriptionOptions.p256dh === 'string' && subscriptionOptions.p256dh.length > 0 && typeof subscriptionOptions.endpoint === 'string' && subscriptionOptions.endpoint.length > 0 && typeof subscriptionOptions.swScope === 'string' && subscriptionOptions.swScope.length > 0 && typeof subscriptionOptions.vapidKey === 'string' && subscriptionOptions.vapidKey.length > 0;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      // Exported for tests.


      var DATABASE_NAME = 'firebase-messaging-database';
      var DATABASE_VERSION = 1;
      var OBJECT_STORE_NAME = 'firebase-messaging-store';
      var dbPromise = null;

      function getDbPromise() {
        if (!dbPromise) {
          dbPromise = (0, idb__WEBPACK_IMPORTED_MODULE_2__.openDb)(DATABASE_NAME, DATABASE_VERSION, function (upgradeDb) {
            // We don't use 'break' in this switch statement, the fall-through behavior is what we want,
            // because if there are multiple versions between the old version and the current version, we
            // want ALL the migrations that correspond to those versions to run, not only the last one.
            // eslint-disable-next-line default-case
            switch (upgradeDb.oldVersion) {
              case 0:
                upgradeDb.createObjectStore(OBJECT_STORE_NAME);
            }
          });
        }

        return dbPromise;
      }
      /** Gets record(s) from the objectStore that match the given key. */


      function dbGet(_x3) {
        return _dbGet.apply(this, arguments);
      }
      /** Assigns or overwrites the record for the given key with the given value. */


      function _dbGet() {
        _dbGet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(firebaseDependencies) {
          var key, db, tokenDetails, oldTokenDetails;
          return _regeneratorRuntime().wrap(function _callee5$(_context5) {
            while (1) switch (_context5.prev = _context5.next) {
              case 0:
                key = getKey(firebaseDependencies);
                _context5.next = 3;
                return getDbPromise();

              case 3:
                db = _context5.sent;
                _context5.next = 6;
                return db.transaction(OBJECT_STORE_NAME).objectStore(OBJECT_STORE_NAME).get(key);

              case 6:
                tokenDetails = _context5.sent;

                if (!tokenDetails) {
                  _context5.next = 11;
                  break;
                }

                return _context5.abrupt("return", tokenDetails);

              case 11:
                _context5.next = 13;
                return migrateOldDatabase(firebaseDependencies.appConfig.senderId);

              case 13:
                oldTokenDetails = _context5.sent;

                if (!oldTokenDetails) {
                  _context5.next = 18;
                  break;
                }

                _context5.next = 17;
                return dbSet(firebaseDependencies, oldTokenDetails);

              case 17:
                return _context5.abrupt("return", oldTokenDetails);

              case 18:
              case "end":
                return _context5.stop();
            }
          }, _callee5);
        }));
        return _dbGet.apply(this, arguments);
      }

      function dbSet(_x4, _x5) {
        return _dbSet.apply(this, arguments);
      }
      /** Removes record(s) from the objectStore that match the given key. */


      function _dbSet() {
        _dbSet = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(firebaseDependencies, tokenDetails) {
          var key, db, tx;
          return _regeneratorRuntime().wrap(function _callee6$(_context6) {
            while (1) switch (_context6.prev = _context6.next) {
              case 0:
                key = getKey(firebaseDependencies);
                _context6.next = 3;
                return getDbPromise();

              case 3:
                db = _context6.sent;
                tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                _context6.next = 7;
                return tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);

              case 7:
                _context6.next = 9;
                return tx.complete;

              case 9:
                return _context6.abrupt("return", tokenDetails);

              case 10:
              case "end":
                return _context6.stop();
            }
          }, _callee6);
        }));
        return _dbSet.apply(this, arguments);
      }

      function dbRemove(_x6) {
        return _dbRemove.apply(this, arguments);
      }

      function _dbRemove() {
        _dbRemove = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(firebaseDependencies) {
          var key, db, tx;
          return _regeneratorRuntime().wrap(function _callee7$(_context7) {
            while (1) switch (_context7.prev = _context7.next) {
              case 0:
                key = getKey(firebaseDependencies);
                _context7.next = 3;
                return getDbPromise();

              case 3:
                db = _context7.sent;
                tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');
                _context7.next = 7;
                return tx.objectStore(OBJECT_STORE_NAME)["delete"](key);

              case 7:
                _context7.next = 9;
                return tx.complete;

              case 9:
              case "end":
                return _context7.stop();
            }
          }, _callee7);
        }));
        return _dbRemove.apply(this, arguments);
      }

      function getKey(_ref) {
        var appConfig = _ref.appConfig;
        return appConfig.appId;
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      var ERROR_MAP = (_ERROR_MAP = {}, _defineProperty(_ERROR_MAP, "missing-app-config-values"
      /* MISSING_APP_CONFIG_VALUES */
      , 'Missing App configuration value: "{$valueName}"'), _defineProperty(_ERROR_MAP, "only-available-in-window"
      /* AVAILABLE_IN_WINDOW */
      , 'This method is available in a Window context.'), _defineProperty(_ERROR_MAP, "only-available-in-sw"
      /* AVAILABLE_IN_SW */
      , 'This method is available in a service worker context.'), _defineProperty(_ERROR_MAP, "permission-default"
      /* PERMISSION_DEFAULT */
      , 'The notification permission was not granted and dismissed instead.'), _defineProperty(_ERROR_MAP, "permission-blocked"
      /* PERMISSION_BLOCKED */
      , 'The notification permission was not granted and blocked instead.'), _defineProperty(_ERROR_MAP, "unsupported-browser"
      /* UNSUPPORTED_BROWSER */
      , "This browser doesn't support the API's required to use the firebase SDK."), _defineProperty(_ERROR_MAP, "indexed-db-unsupported"
      /* INDEXED_DB_UNSUPPORTED */
      , "This browser doesn't support indexedDb.open() (ex. Safari iFrame, Firefox Private Browsing, etc)"), _defineProperty(_ERROR_MAP, "failed-service-worker-registration"
      /* FAILED_DEFAULT_REGISTRATION */
      , 'We are unable to register the default service worker. {$browserErrorMessage}'), _defineProperty(_ERROR_MAP, "token-subscribe-failed"
      /* TOKEN_SUBSCRIBE_FAILED */
      , 'A problem occurred while subscribing the user to FCM: {$errorInfo}'), _defineProperty(_ERROR_MAP, "token-subscribe-no-token"
      /* TOKEN_SUBSCRIBE_NO_TOKEN */
      , 'FCM returned no token when subscribing the user to push.'), _defineProperty(_ERROR_MAP, "token-unsubscribe-failed"
      /* TOKEN_UNSUBSCRIBE_FAILED */
      , 'A problem occurred while unsubscribing the ' + 'user from FCM: {$errorInfo}'), _defineProperty(_ERROR_MAP, "token-update-failed"
      /* TOKEN_UPDATE_FAILED */
      , 'A problem occurred while updating the user from FCM: {$errorInfo}'), _defineProperty(_ERROR_MAP, "token-update-no-token"
      /* TOKEN_UPDATE_NO_TOKEN */
      , 'FCM returned no token when updating the user to push.'), _defineProperty(_ERROR_MAP, "use-sw-after-get-token"
      /* USE_SW_AFTER_GET_TOKEN */
      , 'The useServiceWorker() method may only be called once and must be ' + 'called before calling getToken() to ensure your service worker is used.'), _defineProperty(_ERROR_MAP, "invalid-sw-registration"
      /* INVALID_SW_REGISTRATION */
      , 'The input to useServiceWorker() must be a ServiceWorkerRegistration.'), _defineProperty(_ERROR_MAP, "invalid-bg-handler"
      /* INVALID_BG_HANDLER */
      , 'The input to setBackgroundMessageHandler() must be a function.'), _defineProperty(_ERROR_MAP, "invalid-vapid-key"
      /* INVALID_VAPID_KEY */
      , 'The public VAPID key must be a string.'), _defineProperty(_ERROR_MAP, "use-vapid-key-after-get-token"
      /* USE_VAPID_KEY_AFTER_GET_TOKEN */
      , 'The usePublicVapidKey() method may only be called once and must be ' + 'called before calling getToken() to ensure your VAPID key is used.'), _ERROR_MAP);
      var ERROR_FACTORY = new _firebase_util__WEBPACK_IMPORTED_MODULE_3__.ErrorFactory('messaging', 'Messaging', ERROR_MAP);
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */

      function requestGetToken(_x7, _x8) {
        return _requestGetToken.apply(this, arguments);
      }

      function _requestGetToken() {
        _requestGetToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(firebaseDependencies, subscriptionOptions) {
          var headers, body, subscribeOptions, responseData, response, message;
          return _regeneratorRuntime().wrap(function _callee8$(_context8) {
            while (1) switch (_context8.prev = _context8.next) {
              case 0:
                _context8.next = 2;
                return getHeaders(firebaseDependencies);

              case 2:
                headers = _context8.sent;
                body = getBody(subscriptionOptions);
                subscribeOptions = {
                  method: 'POST',
                  headers: headers,
                  body: JSON.stringify(body)
                };
                _context8.prev = 5;
                _context8.next = 8;
                return fetch(getEndpoint(firebaseDependencies.appConfig), subscribeOptions);

              case 8:
                response = _context8.sent;
                _context8.next = 11;
                return response.json();

              case 11:
                responseData = _context8.sent;
                _context8.next = 17;
                break;

              case 14:
                _context8.prev = 14;
                _context8.t0 = _context8["catch"](5);
                throw ERROR_FACTORY.create("token-subscribe-failed"
                /* TOKEN_SUBSCRIBE_FAILED */
                , {
                  errorInfo: _context8.t0
                });

              case 17:
                if (!responseData.error) {
                  _context8.next = 20;
                  break;
                }

                message = responseData.error.message;
                throw ERROR_FACTORY.create("token-subscribe-failed"
                /* TOKEN_SUBSCRIBE_FAILED */
                , {
                  errorInfo: message
                });

              case 20:
                if (responseData.token) {
                  _context8.next = 22;
                  break;
                }

                throw ERROR_FACTORY.create("token-subscribe-no-token"
                /* TOKEN_SUBSCRIBE_NO_TOKEN */
                );

              case 22:
                return _context8.abrupt("return", responseData.token);

              case 23:
              case "end":
                return _context8.stop();
            }
          }, _callee8, null, [[5, 14]]);
        }));
        return _requestGetToken.apply(this, arguments);
      }

      function requestUpdateToken(_x9, _x10) {
        return _requestUpdateToken.apply(this, arguments);
      }

      function _requestUpdateToken() {
        _requestUpdateToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(firebaseDependencies, tokenDetails) {
          var headers, body, updateOptions, responseData, response, message;
          return _regeneratorRuntime().wrap(function _callee9$(_context9) {
            while (1) switch (_context9.prev = _context9.next) {
              case 0:
                _context9.next = 2;
                return getHeaders(firebaseDependencies);

              case 2:
                headers = _context9.sent;
                body = getBody(tokenDetails.subscriptionOptions);
                updateOptions = {
                  method: 'PATCH',
                  headers: headers,
                  body: JSON.stringify(body)
                };
                _context9.prev = 5;
                _context9.next = 8;
                return fetch("".concat(getEndpoint(firebaseDependencies.appConfig), "/").concat(tokenDetails.token), updateOptions);

              case 8:
                response = _context9.sent;
                _context9.next = 11;
                return response.json();

              case 11:
                responseData = _context9.sent;
                _context9.next = 17;
                break;

              case 14:
                _context9.prev = 14;
                _context9.t0 = _context9["catch"](5);
                throw ERROR_FACTORY.create("token-update-failed"
                /* TOKEN_UPDATE_FAILED */
                , {
                  errorInfo: _context9.t0
                });

              case 17:
                if (!responseData.error) {
                  _context9.next = 20;
                  break;
                }

                message = responseData.error.message;
                throw ERROR_FACTORY.create("token-update-failed"
                /* TOKEN_UPDATE_FAILED */
                , {
                  errorInfo: message
                });

              case 20:
                if (responseData.token) {
                  _context9.next = 22;
                  break;
                }

                throw ERROR_FACTORY.create("token-update-no-token"
                /* TOKEN_UPDATE_NO_TOKEN */
                );

              case 22:
                return _context9.abrupt("return", responseData.token);

              case 23:
              case "end":
                return _context9.stop();
            }
          }, _callee9, null, [[5, 14]]);
        }));
        return _requestUpdateToken.apply(this, arguments);
      }

      function requestDeleteToken(_x11, _x12) {
        return _requestDeleteToken.apply(this, arguments);
      }

      function _requestDeleteToken() {
        _requestDeleteToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(firebaseDependencies, token) {
          var headers, unsubscribeOptions, response, responseData, message;
          return _regeneratorRuntime().wrap(function _callee10$(_context10) {
            while (1) switch (_context10.prev = _context10.next) {
              case 0:
                _context10.next = 2;
                return getHeaders(firebaseDependencies);

              case 2:
                headers = _context10.sent;
                unsubscribeOptions = {
                  method: 'DELETE',
                  headers: headers
                };
                _context10.prev = 4;
                _context10.next = 7;
                return fetch("".concat(getEndpoint(firebaseDependencies.appConfig), "/").concat(token), unsubscribeOptions);

              case 7:
                response = _context10.sent;
                _context10.next = 10;
                return response.json();

              case 10:
                responseData = _context10.sent;

                if (!responseData.error) {
                  _context10.next = 14;
                  break;
                }

                message = responseData.error.message;
                throw ERROR_FACTORY.create("token-unsubscribe-failed"
                /* TOKEN_UNSUBSCRIBE_FAILED */
                , {
                  errorInfo: message
                });

              case 14:
                _context10.next = 19;
                break;

              case 16:
                _context10.prev = 16;
                _context10.t0 = _context10["catch"](4);
                throw ERROR_FACTORY.create("token-unsubscribe-failed"
                /* TOKEN_UNSUBSCRIBE_FAILED */
                , {
                  errorInfo: _context10.t0
                });

              case 19:
              case "end":
                return _context10.stop();
            }
          }, _callee10, null, [[4, 16]]);
        }));
        return _requestDeleteToken.apply(this, arguments);
      }

      function getEndpoint(_ref2) {
        var projectId = _ref2.projectId;
        return "".concat(ENDPOINT, "/projects/").concat(projectId, "/registrations");
      }

      function getHeaders(_x13) {
        return _getHeaders.apply(this, arguments);
      }

      function _getHeaders() {
        _getHeaders = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee11(_ref3) {
          var appConfig, installations, authToken;
          return _regeneratorRuntime().wrap(function _callee11$(_context11) {
            while (1) switch (_context11.prev = _context11.next) {
              case 0:
                appConfig = _ref3.appConfig, installations = _ref3.installations;
                _context11.next = 3;
                return installations.getToken();

              case 3:
                authToken = _context11.sent;
                return _context11.abrupt("return", new Headers({
                  'Content-Type': 'application/json',
                  Accept: 'application/json',
                  'x-goog-api-key': appConfig.apiKey,
                  'x-goog-firebase-installations-auth': "FIS ".concat(authToken)
                }));

              case 5:
              case "end":
                return _context11.stop();
            }
          }, _callee11);
        }));
        return _getHeaders.apply(this, arguments);
      }

      function getBody(_ref4) {
        var p256dh = _ref4.p256dh,
            auth = _ref4.auth,
            endpoint = _ref4.endpoint,
            vapidKey = _ref4.vapidKey;
        var body = {
          web: {
            endpoint: endpoint,
            auth: auth,
            p256dh: p256dh
          }
        };

        if (vapidKey !== DEFAULT_VAPID_KEY) {
          body.web.applicationPubKey = vapidKey;
        }

        return body;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */
      // UpdateRegistration will be called once every week.


      var TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days

      function getTokenInternal(_x14) {
        return _getTokenInternal.apply(this, arguments);
      }
      /**
       * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters
       * the push subscription if it exists.
       */


      function _getTokenInternal() {
        _getTokenInternal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee12(messaging) {
          var pushSubscription, subscriptionOptions, tokenDetails;
          return _regeneratorRuntime().wrap(function _callee12$(_context12) {
            while (1) switch (_context12.prev = _context12.next) {
              case 0:
                _context12.next = 2;
                return getPushSubscription(messaging.swRegistration, messaging.vapidKey);

              case 2:
                pushSubscription = _context12.sent;
                subscriptionOptions = {
                  vapidKey: messaging.vapidKey,
                  swScope: messaging.swRegistration.scope,
                  endpoint: pushSubscription.endpoint,
                  auth: arrayToBase64(pushSubscription.getKey('auth')),
                  p256dh: arrayToBase64(pushSubscription.getKey('p256dh'))
                };
                _context12.next = 6;
                return dbGet(messaging.firebaseDependencies);

              case 6:
                tokenDetails = _context12.sent;

                if (tokenDetails) {
                  _context12.next = 11;
                  break;
                }

                return _context12.abrupt("return", getNewToken(messaging.firebaseDependencies, subscriptionOptions));

              case 11:
                if (isTokenValid(tokenDetails.subscriptionOptions, subscriptionOptions)) {
                  _context12.next = 23;
                  break;
                }

                _context12.prev = 12;
                _context12.next = 15;
                return requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);

              case 15:
                _context12.next = 20;
                break;

              case 17:
                _context12.prev = 17;
                _context12.t0 = _context12["catch"](12);
                // Suppress errors because of #2364
                console.warn(_context12.t0);

              case 20:
                return _context12.abrupt("return", getNewToken(messaging.firebaseDependencies, subscriptionOptions));

              case 23:
                if (!(Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS)) {
                  _context12.next = 27;
                  break;
                }

                return _context12.abrupt("return", updateToken(messaging, {
                  token: tokenDetails.token,
                  createTime: Date.now(),
                  subscriptionOptions: subscriptionOptions
                }));

              case 27:
                return _context12.abrupt("return", tokenDetails.token);

              case 28:
              case "end":
                return _context12.stop();
            }
          }, _callee12, null, [[12, 17]]);
        }));
        return _getTokenInternal.apply(this, arguments);
      }

      function deleteTokenInternal(_x15) {
        return _deleteTokenInternal.apply(this, arguments);
      }

      function _deleteTokenInternal() {
        _deleteTokenInternal = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee13(messaging) {
          var tokenDetails, pushSubscription;
          return _regeneratorRuntime().wrap(function _callee13$(_context13) {
            while (1) switch (_context13.prev = _context13.next) {
              case 0:
                _context13.next = 2;
                return dbGet(messaging.firebaseDependencies);

              case 2:
                tokenDetails = _context13.sent;

                if (!tokenDetails) {
                  _context13.next = 8;
                  break;
                }

                _context13.next = 6;
                return requestDeleteToken(messaging.firebaseDependencies, tokenDetails.token);

              case 6:
                _context13.next = 8;
                return dbRemove(messaging.firebaseDependencies);

              case 8:
                _context13.next = 10;
                return messaging.swRegistration.pushManager.getSubscription();

              case 10:
                pushSubscription = _context13.sent;

                if (!pushSubscription) {
                  _context13.next = 13;
                  break;
                }

                return _context13.abrupt("return", pushSubscription.unsubscribe());

              case 13:
                return _context13.abrupt("return", true);

              case 14:
              case "end":
                return _context13.stop();
            }
          }, _callee13);
        }));
        return _deleteTokenInternal.apply(this, arguments);
      }

      function updateToken(_x16, _x17) {
        return _updateToken.apply(this, arguments);
      }

      function _updateToken() {
        _updateToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee14(messaging, tokenDetails) {
          var updatedToken, updatedTokenDetails;
          return _regeneratorRuntime().wrap(function _callee14$(_context14) {
            while (1) switch (_context14.prev = _context14.next) {
              case 0:
                _context14.prev = 0;
                _context14.next = 3;
                return requestUpdateToken(messaging.firebaseDependencies, tokenDetails);

              case 3:
                updatedToken = _context14.sent;
                updatedTokenDetails = Object.assign(Object.assign({}, tokenDetails), {
                  token: updatedToken,
                  createTime: Date.now()
                });
                _context14.next = 7;
                return dbSet(messaging.firebaseDependencies, updatedTokenDetails);

              case 7:
                return _context14.abrupt("return", updatedToken);

              case 10:
                _context14.prev = 10;
                _context14.t0 = _context14["catch"](0);
                _context14.next = 14;
                return deleteTokenInternal(messaging);

              case 14:
                throw _context14.t0;

              case 15:
              case "end":
                return _context14.stop();
            }
          }, _callee14, null, [[0, 10]]);
        }));
        return _updateToken.apply(this, arguments);
      }

      function getNewToken(_x18, _x19) {
        return _getNewToken.apply(this, arguments);
      }
      /**
       * Gets a PushSubscription for the current user.
       */


      function _getNewToken() {
        _getNewToken = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee15(firebaseDependencies, subscriptionOptions) {
          var token, tokenDetails;
          return _regeneratorRuntime().wrap(function _callee15$(_context15) {
            while (1) switch (_context15.prev = _context15.next) {
              case 0:
                _context15.next = 2;
                return requestGetToken(firebaseDependencies, subscriptionOptions);

              case 2:
                token = _context15.sent;
                tokenDetails = {
                  token: token,
                  createTime: Date.now(),
                  subscriptionOptions: subscriptionOptions
                };
                _context15.next = 6;
                return dbSet(firebaseDependencies, tokenDetails);

              case 6:
                return _context15.abrupt("return", tokenDetails.token);

              case 7:
              case "end":
                return _context15.stop();
            }
          }, _callee15);
        }));
        return _getNewToken.apply(this, arguments);
      }

      function getPushSubscription(_x20, _x21) {
        return _getPushSubscription.apply(this, arguments);
      }
      /**
       * Checks if the saved tokenDetails object matches the configuration provided.
       */


      function _getPushSubscription() {
        _getPushSubscription = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee16(swRegistration, vapidKey) {
          var subscription;
          return _regeneratorRuntime().wrap(function _callee16$(_context16) {
            while (1) switch (_context16.prev = _context16.next) {
              case 0:
                _context16.next = 2;
                return swRegistration.pushManager.getSubscription();

              case 2:
                subscription = _context16.sent;

                if (!subscription) {
                  _context16.next = 5;
                  break;
                }

                return _context16.abrupt("return", subscription);

              case 5:
                return _context16.abrupt("return", swRegistration.pushManager.subscribe({
                  userVisibleOnly: true,
                  // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key
                  // submitted to pushManager#subscribe must be of type Uint8Array.
                  applicationServerKey: base64ToArray(vapidKey)
                }));

              case 6:
              case "end":
                return _context16.stop();
            }
          }, _callee16);
        }));
        return _getPushSubscription.apply(this, arguments);
      }

      function isTokenValid(dbOptions, currentOptions) {
        var isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;
        var isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;
        var isAuthEqual = currentOptions.auth === dbOptions.auth;
        var isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;
        return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      function externalizePayload(internalPayload) {
        var payload = {
          from: internalPayload.from,
          // eslint-disable-next-line camelcase
          collapseKey: internalPayload.collapse_key,
          // eslint-disable-next-line camelcase
          messageId: internalPayload.fcm_message_id
        };
        propagateNotificationPayload(payload, internalPayload);
        propagateDataPayload(payload, internalPayload);
        propagateFcmOptions(payload, internalPayload);
        return payload;
      }

      function propagateNotificationPayload(payload, messagePayloadInternal) {
        if (!messagePayloadInternal.notification) {
          return;
        }

        payload.notification = {};
        var title = messagePayloadInternal.notification.title;

        if (!!title) {
          payload.notification.title = title;
        }

        var body = messagePayloadInternal.notification.body;

        if (!!body) {
          payload.notification.body = body;
        }

        var image = messagePayloadInternal.notification.image;

        if (!!image) {
          payload.notification.image = image;
        }
      }

      function propagateDataPayload(payload, messagePayloadInternal) {
        if (!messagePayloadInternal.data) {
          return;
        }

        payload.data = messagePayloadInternal.data;
      }

      function propagateFcmOptions(payload, messagePayloadInternal) {
        if (!messagePayloadInternal.fcmOptions) {
          return;
        }

        payload.fcmOptions = {};
        var link = messagePayloadInternal.fcmOptions.link;

        if (!!link) {
          payload.fcmOptions.link = link;
        } // eslint-disable-next-line camelcase


        var analyticsLabel = messagePayloadInternal.fcmOptions.analytics_label;

        if (!!analyticsLabel) {
          payload.fcmOptions.analyticsLabel = analyticsLabel;
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      function isConsoleMessage(data) {
        // This message has a campaign ID, meaning it was sent using the Firebase Console.
        return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */

      /** Returns a promise that resolves after given time passes. */


      function sleep(ms) {
        return new Promise(function (resolve) {
          setTimeout(resolve, ms);
        });
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      _mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');

      _mergeStrings('AzSCbw63g1R0nCw85jG8', 'Iaya3yLKwmgvh7cF0q4');

      function stageLog(_x22, _x23) {
        return _stageLog.apply(this, arguments);
      }

      function _stageLog() {
        _stageLog = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee17(messaging, internalPayload) {
          var fcmEvent;
          return _regeneratorRuntime().wrap(function _callee17$(_context17) {
            while (1) switch (_context17.prev = _context17.next) {
              case 0:
                _context17.t0 = createFcmEvent;
                _context17.t1 = internalPayload;
                _context17.next = 4;
                return messaging.firebaseDependencies.installations.getId();

              case 4:
                _context17.t2 = _context17.sent;
                fcmEvent = (0, _context17.t0)(_context17.t1, _context17.t2);
                createAndEnqueueLogEvent(messaging, fcmEvent);

              case 7:
              case "end":
                return _context17.stop();
            }
          }, _callee17);
        }));
        return _stageLog.apply(this, arguments);
      }

      function createFcmEvent(internalPayload, fid) {
        var _a, _b;

        var fcmEvent = {};
        /* eslint-disable camelcase */
        // some fields should always be non-null. Still check to ensure.

        if (!!internalPayload.from) {
          fcmEvent.project_number = internalPayload.from;
        }

        if (!!internalPayload.fcm_message_id) {
          fcmEvent.message_id = internalPayload.fcm_message_id;
        }

        fcmEvent.instance_id = fid;

        if (!!internalPayload.notification) {
          fcmEvent.message_type = MessageType$1.DISPLAY_NOTIFICATION.toString();
        } else {
          fcmEvent.message_type = MessageType$1.DATA_MESSAGE.toString();
        }

        fcmEvent.sdk_platform = SDK_PLATFORM_WEB.toString();
        fcmEvent.package_name = self.origin.replace(/(^\w+:|^)\/\//, '');

        if (!!internalPayload.collapse_key) {
          fcmEvent.collapse_key = internalPayload.collapse_key;
        }

        fcmEvent.event = EVENT_MESSAGE_DELIVERED.toString();

        if (!!((_a = internalPayload.fcmOptions) === null || _a === void 0 ? void 0 : _a.analytics_label)) {
          fcmEvent.analytics_label = (_b = internalPayload.fcmOptions) === null || _b === void 0 ? void 0 : _b.analytics_label;
        }
        /* eslint-enable camelcase */


        return fcmEvent;
      }

      function createAndEnqueueLogEvent(messaging, fcmEvent) {
        var logEvent = {};
        /* eslint-disable camelcase */

        logEvent.event_time_ms = Math.floor(Date.now()).toString();
        logEvent.source_extension_json_proto3 = JSON.stringify(fcmEvent); // eslint-disable-next-line camelcase

        messaging.logEvents.push(logEvent);
      }

      function _mergeStrings(s1, s2) {
        var resultArray = [];

        for (var i = 0; i < s1.length; i++) {
          resultArray.push(s1.charAt(i));

          if (i < s2.length) {
            resultArray.push(s2.charAt(i));
          }
        }

        return resultArray.join('');
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      function onSubChange(_x24, _x25) {
        return _onSubChange.apply(this, arguments);
      }

      function _onSubChange() {
        _onSubChange = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee18(event, messaging) {
          var _a, _b, newSubscription, tokenDetails;

          return _regeneratorRuntime().wrap(function _callee18$(_context18) {
            while (1) switch (_context18.prev = _context18.next) {
              case 0:
                newSubscription = event.newSubscription;

                if (newSubscription) {
                  _context18.next = 5;
                  break;
                }

                _context18.next = 4;
                return deleteTokenInternal(messaging);

              case 4:
                return _context18.abrupt("return");

              case 5:
                _context18.next = 7;
                return dbGet(messaging.firebaseDependencies);

              case 7:
                tokenDetails = _context18.sent;
                _context18.next = 10;
                return deleteTokenInternal(messaging);

              case 10:
                messaging.vapidKey = (_b = (_a = tokenDetails === null || tokenDetails === void 0 ? void 0 : tokenDetails.subscriptionOptions) === null || _a === void 0 ? void 0 : _a.vapidKey) !== null && _b !== void 0 ? _b : DEFAULT_VAPID_KEY;
                _context18.next = 13;
                return getTokenInternal(messaging);

              case 13:
              case "end":
                return _context18.stop();
            }
          }, _callee18);
        }));
        return _onSubChange.apply(this, arguments);
      }

      function onPush(_x26, _x27) {
        return _onPush.apply(this, arguments);
      }

      function _onPush() {
        _onPush = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee19(event, messaging) {
          var internalPayload, clientList, payload;
          return _regeneratorRuntime().wrap(function _callee19$(_context19) {
            while (1) switch (_context19.prev = _context19.next) {
              case 0:
                internalPayload = getMessagePayloadInternal(event);

                if (internalPayload) {
                  _context19.next = 3;
                  break;
                }

                return _context19.abrupt("return");

              case 3:
                if (!messaging.deliveryMetricsExportedToBigQueryEnabled) {
                  _context19.next = 6;
                  break;
                }

                _context19.next = 6;
                return stageLog(messaging, internalPayload);

              case 6:
                _context19.next = 8;
                return getClientList();

              case 8:
                clientList = _context19.sent;

                if (!hasVisibleClients(clientList)) {
                  _context19.next = 11;
                  break;
                }

                return _context19.abrupt("return", sendMessagePayloadInternalToWindows(clientList, internalPayload));

              case 11:
                if (!internalPayload.notification) {
                  _context19.next = 14;
                  break;
                }

                _context19.next = 14;
                return showNotification(wrapInternalPayload(internalPayload));

              case 14:
                if (messaging) {
                  _context19.next = 16;
                  break;
                }

                return _context19.abrupt("return");

              case 16:
                if (!!messaging.onBackgroundMessageHandler) {
                  payload = externalizePayload(internalPayload);

                  if (typeof messaging.onBackgroundMessageHandler === 'function') {
                    messaging.onBackgroundMessageHandler(payload);
                  } else {
                    messaging.onBackgroundMessageHandler.next(payload);
                  }
                }

              case 17:
              case "end":
                return _context19.stop();
            }
          }, _callee19);
        }));
        return _onPush.apply(this, arguments);
      }

      function onNotificationClick(_x28) {
        return _onNotificationClick.apply(this, arguments);
      }

      function _onNotificationClick() {
        _onNotificationClick = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee20(event) {
          var _a, _b, internalPayload, link, url, originUrl, client;

          return _regeneratorRuntime().wrap(function _callee20$(_context20) {
            while (1) switch (_context20.prev = _context20.next) {
              case 0:
                internalPayload = (_b = (_a = event.notification) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b[FCM_MSG];

                if (internalPayload) {
                  _context20.next = 5;
                  break;
                }

                return _context20.abrupt("return");

              case 5:
                if (!event.action) {
                  _context20.next = 7;
                  break;
                }

                return _context20.abrupt("return");

              case 7:
                // Prevent other listeners from receiving the event
                event.stopImmediatePropagation();
                event.notification.close(); // Note clicking on a notification with no link set will focus the Chrome's current tab.

                link = getLink(internalPayload);

                if (link) {
                  _context20.next = 12;
                  break;
                }

                return _context20.abrupt("return");

              case 12:
                // FM should only open/focus links from app's origin.
                url = new URL(link, self.location.href);
                originUrl = new URL(self.location.origin);

                if (!(url.host !== originUrl.host)) {
                  _context20.next = 16;
                  break;
                }

                return _context20.abrupt("return");

              case 16:
                _context20.next = 18;
                return getWindowClient(url);

              case 18:
                client = _context20.sent;

                if (client) {
                  _context20.next = 27;
                  break;
                }

                _context20.next = 22;
                return self.clients.openWindow(link);

              case 22:
                client = _context20.sent;
                _context20.next = 25;
                return sleep(3000);

              case 25:
                _context20.next = 30;
                break;

              case 27:
                _context20.next = 29;
                return client.focus();

              case 29:
                client = _context20.sent;

              case 30:
                if (client) {
                  _context20.next = 32;
                  break;
                }

                return _context20.abrupt("return");

              case 32:
                internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;
                internalPayload.isFirebaseMessaging = true;
                return _context20.abrupt("return", client.postMessage(internalPayload));

              case 35:
              case "end":
                return _context20.stop();
            }
          }, _callee20);
        }));
        return _onNotificationClick.apply(this, arguments);
      }

      function wrapInternalPayload(internalPayload) {
        var wrappedInternalPayload = Object.assign({}, internalPayload.notification); // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM
        // notification vs a notification from somewhere else (i.e. normal web push or developer generated
        // notification).

        wrappedInternalPayload.data = _defineProperty({}, FCM_MSG, internalPayload);
        return wrappedInternalPayload;
      }

      function getMessagePayloadInternal(_ref5) {
        var data = _ref5.data;

        if (!data) {
          return null;
        }

        try {
          return data.json();
        } catch (err) {
          // Not JSON so not an FCM message.
          return null;
        }
      }
      /**
       * @param url The URL to look for when focusing a client.
       * @return Returns an existing window client or a newly opened WindowClient.
       */


      function getWindowClient(_x29) {
        return _getWindowClient.apply(this, arguments);
      }
      /**
       * @returns If there is currently a visible WindowClient, this method will resolve to true,
       * otherwise false.
       */


      function _getWindowClient() {
        _getWindowClient = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee21(url) {
          var clientList, _iterator2, _step2, client, clientUrl;

          return _regeneratorRuntime().wrap(function _callee21$(_context21) {
            while (1) switch (_context21.prev = _context21.next) {
              case 0:
                _context21.next = 2;
                return getClientList();

              case 2:
                clientList = _context21.sent;
                _iterator2 = _createForOfIteratorHelper(clientList);
                _context21.prev = 4;

                _iterator2.s();

              case 6:
                if ((_step2 = _iterator2.n()).done) {
                  _context21.next = 13;
                  break;
                }

                client = _step2.value;
                clientUrl = new URL(client.url, self.location.href);

                if (!(url.host === clientUrl.host)) {
                  _context21.next = 11;
                  break;
                }

                return _context21.abrupt("return", client);

              case 11:
                _context21.next = 6;
                break;

              case 13:
                _context21.next = 18;
                break;

              case 15:
                _context21.prev = 15;
                _context21.t0 = _context21["catch"](4);

                _iterator2.e(_context21.t0);

              case 18:
                _context21.prev = 18;

                _iterator2.f();

                return _context21.finish(18);

              case 21:
                return _context21.abrupt("return", null);

              case 22:
              case "end":
                return _context21.stop();
            }
          }, _callee21, null, [[4, 15, 18, 21]]);
        }));
        return _getWindowClient.apply(this, arguments);
      }

      function hasVisibleClients(clientList) {
        return clientList.some(function (client) {
          return client.visibilityState === 'visible' && // Ignore chrome-extension clients as that matches the background pages of extensions, which
          // are always considered visible for some reason.
          !client.url.startsWith('chrome-extension://');
        });
      }

      function sendMessagePayloadInternalToWindows(clientList, internalPayload) {
        internalPayload.isFirebaseMessaging = true;
        internalPayload.messageType = MessageType.PUSH_RECEIVED;

        var _iterator = _createForOfIteratorHelper(clientList),
            _step;

        try {
          for (_iterator.s(); !(_step = _iterator.n()).done;) {
            var client = _step.value;
            client.postMessage(internalPayload);
          }
        } catch (err) {
          _iterator.e(err);
        } finally {
          _iterator.f();
        }
      }

      function getClientList() {
        return self.clients.matchAll({
          type: 'window',
          includeUncontrolled: true // TS doesn't know that "type: 'window'" means it'll return WindowClient[]

        });
      }

      function showNotification(notificationPayloadInternal) {
        var _a; // Note: Firefox does not support the maxActions property.
        // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions


        var actions = notificationPayloadInternal.actions;
        var _Notification = Notification,
            maxActions = _Notification.maxActions;

        if (actions && maxActions && actions.length > maxActions) {
          console.warn("This browser only supports ".concat(maxActions, " actions. The remaining actions will not be displayed."));
        }

        return self.registration.showNotification(
        /* title= */
        (_a = notificationPayloadInternal.title) !== null && _a !== void 0 ? _a : '', notificationPayloadInternal);
      }

      function getLink(payload) {
        var _a, _b, _c; // eslint-disable-next-line camelcase


        var link = (_b = (_a = payload.fcmOptions) === null || _a === void 0 ? void 0 : _a.link) !== null && _b !== void 0 ? _b : (_c = payload.notification) === null || _c === void 0 ? void 0 : _c.click_action;

        if (link) {
          return link;
        }

        if (isConsoleMessage(payload.data)) {
          // Notification created in the Firebase Console. Redirect to origin.
          return self.location.origin;
        } else {
          return null;
        }
      }
      /**
       * @license
       * Copyright 2019 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      function extractAppConfig(app) {
        if (!app || !app.options) {
          throw getMissingValueError('App Configuration Object');
        }

        if (!app.name) {
          throw getMissingValueError('App Name');
        } // Required app config keys


        var configKeys = ['projectId', 'apiKey', 'appId', 'messagingSenderId'];
        var options = app.options;

        for (var _i = 0, _configKeys = configKeys; _i < _configKeys.length; _i++) {
          var keyName = _configKeys[_i];

          if (!options[keyName]) {
            throw getMissingValueError(keyName);
          }
        }

        return {
          appName: app.name,
          projectId: options.projectId,
          apiKey: options.apiKey,
          appId: options.appId,
          senderId: options.messagingSenderId
        };
      }

      function getMissingValueError(valueName) {
        return ERROR_FACTORY.create("missing-app-config-values"
        /* MISSING_APP_CONFIG_VALUES */
        , {
          valueName: valueName
        });
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      var MessagingService = /*#__PURE__*/function () {
        function MessagingService(app, installations, analyticsProvider) {
          _classCallCheck(this, MessagingService);

          // logging is only done with end user consent. Default to false.
          this.deliveryMetricsExportedToBigQueryEnabled = false;
          this.onBackgroundMessageHandler = null;
          this.onMessageHandler = null;
          this.logEvents = [];
          this.isLogServiceStarted = false;
          var appConfig = extractAppConfig(app);
          this.firebaseDependencies = {
            app: app,
            appConfig: appConfig,
            installations: installations,
            analyticsProvider: analyticsProvider
          };
        }

        _createClass(MessagingService, [{
          key: "_delete",
          value: function _delete() {
            return Promise.resolve();
          }
        }]);

        return MessagingService;
      }();
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      var SwMessagingFactory = function SwMessagingFactory(container) {
        var messaging = new MessagingService(container.getProvider('app').getImmediate(), container.getProvider('installations-internal').getImmediate(), container.getProvider('analytics-internal'));
        self.addEventListener('push', function (e) {
          e.waitUntil(onPush(e, messaging));
        });
        self.addEventListener('pushsubscriptionchange', function (e) {
          e.waitUntil(onSubChange(e, messaging));
        });
        self.addEventListener('notificationclick', function (e) {
          e.waitUntil(onNotificationClick(e));
        });
        return messaging;
      };
      /**
       * The messaging instance registered in sw is named differently than that of in client. This is
       * because both `registerMessagingInWindow` and `registerMessagingInSw` would be called in
       * `messaging-compat` and component with the same name can only be registered once.
       */


      function registerMessagingInSw() {
        (0, _firebase_app__WEBPACK_IMPORTED_MODULE_4__._registerComponent)(new _firebase_component__WEBPACK_IMPORTED_MODULE_1__.Component('messaging-sw', SwMessagingFactory, "PUBLIC"
        /* PUBLIC */
        ));
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */

      /**
       * Checks whether all required APIs exist within SW Context
       * @returns a Promise that resolves to a boolean.
       *
       * @public
       */


      function isSwSupported() {
        return _isSwSupported.apply(this, arguments);
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      function _isSwSupported() {
        _isSwSupported = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {
          return _regeneratorRuntime().wrap(function _callee22$(_context22) {
            while (1) switch (_context22.prev = _context22.next) {
              case 0:
                _context22.next = 2;
                return (0, _firebase_util__WEBPACK_IMPORTED_MODULE_3__.validateIndexedDBOpenable)();

              case 2:
                _context22.t5 = _context22.sent;

                if (!_context22.t5) {
                  _context22.next = 5;
                  break;
                }

                _context22.t5 = 'indexedDB' in self;

              case 5:
                _context22.t4 = _context22.t5;

                if (!_context22.t4) {
                  _context22.next = 8;
                  break;
                }

                _context22.t4 = indexedDB !== null;

              case 8:
                _context22.t3 = _context22.t4;

                if (!_context22.t3) {
                  _context22.next = 11;
                  break;
                }

                _context22.t3 = 'PushManager' in self;

              case 11:
                _context22.t2 = _context22.t3;

                if (!_context22.t2) {
                  _context22.next = 14;
                  break;
                }

                _context22.t2 = 'Notification' in self;

              case 14:
                _context22.t1 = _context22.t2;

                if (!_context22.t1) {
                  _context22.next = 17;
                  break;
                }

                _context22.t1 = ServiceWorkerRegistration.prototype.hasOwnProperty('showNotification');

              case 17:
                _context22.t0 = _context22.t1;

                if (!_context22.t0) {
                  _context22.next = 20;
                  break;
                }

                _context22.t0 = PushSubscription.prototype.hasOwnProperty('getKey');

              case 20:
                return _context22.abrupt("return", _context22.t0);

              case 21:
              case "end":
                return _context22.stop();
            }
          }, _callee22);
        }));
        return _isSwSupported.apply(this, arguments);
      }

      function onBackgroundMessage$1(messaging, nextOrObserver) {
        if (self.document !== undefined) {
          throw ERROR_FACTORY.create("only-available-in-sw"
          /* AVAILABLE_IN_SW */
          );
        }

        messaging.onBackgroundMessageHandler = nextOrObserver;
        return function () {
          messaging.onBackgroundMessageHandler = null;
        };
      }
      /**
       * @license
       * Copyright 2020 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      function _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable) {
        messaging.deliveryMetricsExportedToBigQueryEnabled = enable;
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */

      /**
       * Retrieves a Firebase Cloud Messaging instance.
       *
       * @returns The Firebase Cloud Messaging instance associated with the provided firebase app.
       *
       * @public
       */


      function getMessagingInSw() {
        var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0, _firebase_app__WEBPACK_IMPORTED_MODULE_4__.getApp)();
        // Conscious decision to make this async check non-blocking during the messaging instance
        // initialization phase for performance consideration. An error would be thrown latter for
        // developer's information. Developers can then choose to import and call `isSupported` for
        // special handling.
        isSwSupported().then(function (isSupported) {
          // If `isSwSupported()` resolved, but returned false.
          if (!isSupported) {
            throw ERROR_FACTORY.create("unsupported-browser"
            /* UNSUPPORTED_BROWSER */
            );
          }
        }, function (_) {
          // If `isSwSupported()` rejected.
          throw ERROR_FACTORY.create("indexed-db-unsupported"
          /* INDEXED_DB_UNSUPPORTED */
          );
        });
        return (0, _firebase_app__WEBPACK_IMPORTED_MODULE_4__._getProvider)((0, _firebase_util__WEBPACK_IMPORTED_MODULE_3__.getModularInstance)(app), 'messaging-sw').getImmediate();
      }
      /**
       * Called when a message is received while the app is in the background. An app is considered to be
       * in the background if no active window is displayed.
       *
       * @param messaging - The {@link Messaging} instance.
       * @param nextOrObserver - This function, or observer object with `next` defined, is called when a
       * message is received and the app is currently in the background.
       *
       * @returns To stop listening for messages execute this returned function
       *
       * @public
       */


      function _onBackgroundMessage(messaging, nextOrObserver) {
        messaging = (0, _firebase_util__WEBPACK_IMPORTED_MODULE_3__.getModularInstance)(messaging);
        return onBackgroundMessage$1(messaging, nextOrObserver);
      }
      /**
       * Enables or disables Firebase Cloud Messaging message delivery metrics export to BigQuery. By
       * default, message delivery metrics are not exported to BigQuery. Use this method to enable or
       * disable the export at runtime.
       *
       * @param messaging - The `FirebaseMessaging` instance.
       * @param enable - Whether Firebase Cloud Messaging should export message delivery metrics to
       * BigQuery.
       *
       * @public
       */


      function setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable) {
        messaging = (0, _firebase_util__WEBPACK_IMPORTED_MODULE_3__.getModularInstance)(messaging);
        return _setDeliveryMetricsExportedToBigQueryEnabled(messaging, enable);
      }
      /**
       * @license
       * Copyright 2017 Google LLC
       *
       * Licensed under the Apache License, Version 2.0 (the "License");
       * you may not use this file except in compliance with the License.
       * You may obtain a copy of the License at
       *
       *   http://www.apache.org/licenses/LICENSE-2.0
       *
       * Unless required by applicable law or agreed to in writing, software
       * distributed under the License is distributed on an "AS IS" BASIS,
       * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
       * See the License for the specific language governing permissions and
       * limitations under the License.
       */


      registerMessagingInSw(); //# sourceMappingURL=index.sw.esm2017.js.map

      /***/
    },

    /***/
    45954:
    /*!******************************************************************!*\
      !*** ./node_modules/firebase/compat/messaging/dist/index.esm.js ***!
      \******************************************************************/

    /***/
    function _(__unused_webpack_module, __webpack_exports__, __webpack_require__) {
      "use strict";

      __webpack_require__.r(__webpack_exports__);
      /* harmony import */


      var _firebase_messaging_compat__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(
      /*! @firebase/messaging-compat */
      60728); //# sourceMappingURL=index.esm.js.map

      /***/

    }
  }]);
})();
//# sourceMappingURL=node_modules_firebase_compat_messaging_dist_index_esm_js-es5.js.map